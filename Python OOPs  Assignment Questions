{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMiELsggK2UbHsCk5IFkrJt"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#Python OOPs  Assignment Questions"],"metadata":{"id":"5rjILMXN2adq"}},{"cell_type":"markdown","source":["## 1. What is Object-Oriented Programming (OOP)?\n","\n","ANS=\n","Object-Oriented Programming is a programming paradigm based on the concept of “objects” that contain data (attributes) and code (methods) to operate on that data.\n","\n","\n"],"metadata":{"id":"5WN3el41spBs"}},{"cell_type":"markdown","source":["##2. What is a class in OOP?\n","\n","ANS=2.A class is a blueprint or template used to create objects. It defines attributes and methods that the objects created from the class will have.\n","\n","\n","\n"],"metadata":{"id":"aI9e-YxOtCrC"}},{"cell_type":"markdown","source":["## 3. What is an object in OOP?\n","\n","ANS=An object is an instance of a class. It represents a real-world entity and can use the properties and behaviors defined in the class.\n","\n"],"metadata":{"id":"gIuT_tpwtQ2E"}},{"cell_type":"markdown","source":["##4. What is the difference between abstraction and encapsulation?\n","\n","ANS=Abstraction hides complex implementation details and only shows necessary features.\n","\n","\n","Encapsulation binds data and methods into a single unit and restricts access to the inner details.\n","\n"],"metadata":{"id":"hA-XEFfTttrS"}},{"cell_type":"markdown","source":["##5. What are dunder methods in Python?\n","\n","ANS=Dunder (double underscore) methods are special Python methods with names like __init__, __str__, and __len__. They allow custom behavior for built-in operations.\n","\n","\n"],"metadata":{"id":"l_baRiTot1Ue"}},{"cell_type":"markdown","source":["##6. Explain the concept of inheritance in OOP.\n","\n","ANS=Inheritance allows one class (child) to inherit the properties and methods of another class (parent). It promotes code reuse and hierarchical classification.\n","\n"],"metadata":{"id":"l980KCOdt_uN"}},{"cell_type":"markdown","source":["##7. What is polymorphism in OOP?\n","\n","ANS=Polymorphism means \"many forms\". It allows the same method name to behave differently for different classes or objects.\n","\n"],"metadata":{"id":"8y0h-qrCuJyS"}},{"cell_type":"markdown","source":["##8. How is encapsulation achieved in Python?\n","\n","ANS=Encapsulation is achieved using access modifiers. In Python, variables with double underscores (e.g., __name) are private and cannot be accessed directly from outside the class.\n","\n"],"metadata":{"id":"ZVZymbGhuQo9"}},{"cell_type":"markdown","source":["##9. What is a constructor in Python?\n","\n","ANS=A constructor is a special method named __init__ that is automatically called when an object is created. It is used to initialize object properties.\n","\n"],"metadata":{"id":"_Y5YqxD2uXAj"}},{"cell_type":"markdown","source":["##10. What are class and static methods in Python?\n","\n","ANS=1.Class Method: Declared using @classmethod, takes cls as the first argument and can access class variables.\n","\n","\n","2.Static Method: Declared using @staticmethod, doesn’t take self or cls, and acts like a regular function inside a class.\n","\n"],"metadata":{"id":"TnPZ4p58ub7w"}},{"cell_type":"markdown","source":["##11. What is method overloading in Python?\n","\n","ANS=Python doesn’t support method overloading by default. However, you can achieve similar functionality using default arguments or *args and **kwargs.\n","\n"],"metadata":{"id":"sRh6Use8ulEh"}},{"cell_type":"markdown","source":["## 12. What is method overriding in OOP?\n","\n","ANS=Method overriding means redefining a method from the parent class in the child class to provide a new implementation.\n","\n"],"metadata":{"id":"OkNjabxsurJS"}},{"cell_type":"markdown","source":["##13. What is a property decorator in Python?\n","\n","ANS=The @property decorator lets you access class methods like attributes, helping in encapsulation and cleaner syntax.\n","\n"],"metadata":{"id":"QlTBsx7huwaz"}},{"cell_type":"markdown","source":["##14. Why is polymorphism important in OOP?\n","\n","ANS=Polymorphism allows flexibility and reusability in code. It lets different objects respond to the same function in different ways.\n","\n"],"metadata":{"id":"E-0TXRALu3bc"}},{"cell_type":"markdown","source":["##15. What is an abstract class in Python?\n","\n","ANS=An abstract class is a class that cannot be instantiated and serves as a blueprint for other classes. It is created using the abc module and the @abstractmethod decorator.\n","\n"],"metadata":{"id":"N9RnxdPMu_A9"}},{"cell_type":"markdown","source":["##16. What are the advantages of OOP?\n","\n","ANS=1.Reusability (through inheritance)\n","    2.Flexibility (with polymorphism)\n","    3.Data protection (via encapsulation)\n","    4.Organized code (through class structure)\n","\n","\n","\n","\n"],"metadata":{"id":"0L9meSubvD9C"}},{"cell_type":"markdown","source":["# #17. What is the difference between a class variable and an instance variable?\n","\n","ANS=1.Class Variable: Shared among all instances of a class.\n","\n","\n","2.Instance Variable: Unique to each object of the class.\n","\n"],"metadata":{"id":"CI-EBUu3vU4D"}},{"cell_type":"markdown","source":["##18. What is multiple inheritance in Python?\n","\n","ANS=18. What is multiple inheritance in Python?\n"],"metadata":{"id":"3GCx8F8lveF7"}},{"cell_type":"markdown","source":["##19. Explain the purpose of __str__ and __repr__ methods in Python.\n","\n","ANS= .__str__: Used to return a readable string representation of an object.\n","\n",".__repr__: Returns a developer-friendly string used mainly for debugging.\n","\n","\n"],"metadata":{"id":"8pxjWoTuvidQ"}},{"cell_type":"markdown","source":["##20. What is the significance of the super() function in Python?\n","\n","ANS=The super() function is used to call methods from a parent class, especially in cases of inheritance and method overriding.\n","\n"],"metadata":{"id":"UE5nGSJVv3n0"}},{"cell_type":"markdown","source":["##21. What is the significance of the __del__ method in Python?\n","\n","ANS=The __del__ method is a destructor that is automatically called when an object is deleted. It is used to clean up resources.\n","\n"],"metadata":{"id":"7IQBGDCPv8Kb"}},{"cell_type":"markdown","source":["##22. What is the difference between @staticmethod and @classmethod in Python?\n","\n","ANS= Feature :-1. frist parameter              \n","\n","2.accessto clas\n","\n","3.access to instance\n","\n","4.acsess to instance?\n","\n","5.use case\n","\n","@staticmethod :-1.Doesn’t take self or cls\n","\n","2.no\n","\n","3.no\n","\n","4.When method logic doesn't need object or class info\n","\n","\n","@clasmatehod :-1.Takes cls as the first parameter\n","\n","2.yes\n","\n","3.no\n","\n","4.When method logic relates to the class itself\n","\n","\n","\n","\n"],"metadata":{"id":"W7E0GCcZw49q"}},{"cell_type":"markdown","source":["##23. How does polymorphism work in Python with Inheritance?\n","\n","ANS=Polymorphism in inheritance allows methods in child classes to override methods in the parent class with the same name. The actual method executed depends on the object type at runtime.\n","\n"],"metadata":{"id":"u8zdOsotzcz4"}},{"cell_type":"code","source":["class Animal:\n","    def sound(self):\n","        print(\"Some sound\")\n","\n","class Dog(Animal):\n","    def sound(self):\n","        print(\"Bark\")\n","\n","class Cat(Animal):\n","    def sound(self):\n","        print(\"Meow\")\n","\n","# Polymorphic behavior:\n","for animal in [Dog(), Cat()]:\n","    animal.sound()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lZBPzqTEzksq","executionInfo":{"status":"ok","timestamp":1751554890457,"user_tz":-330,"elapsed":39,"user":{"displayName":"yadavrao 7156","userId":"13021835502736852476"}},"outputId":"d0780332-53ba-40c9-85f9-a4f2f40eaae2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Bark\n","Meow\n"]}]},{"cell_type":"markdown","source":["##24. What is method chaining in Python OOP?\n","\n","ANS=Method chaining is a technique where multiple methods are called on the same object in a single line of code. It is achieved by returning self from each method.\n"],"metadata":{"id":"3TY1pGHKzroA"}},{"cell_type":"code","source":["class Example:\n","    def step1(self):\n","        print(\"Step 1\")\n","        return self\n","\n","    def step2(self):\n","        print(\"Step 2\")\n","        return self\n","\n","obj = Example()\n","obj.step1().step2()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5xcaUvqFzyyW","executionInfo":{"status":"ok","timestamp":1751554932008,"user_tz":-330,"elapsed":53,"user":{"displayName":"yadavrao 7156","userId":"13021835502736852476"}},"outputId":"832bde45-b920-4327-ae9f-766e873e8618"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Step 1\n","Step 2\n"]},{"output_type":"execute_result","data":{"text/plain":["<__main__.Example at 0x7c0b10368150>"]},"metadata":{},"execution_count":2}]},{"cell_type":"markdown","source":["##25. What is the purpose of the __call__ method in Python?\n","\n","ANS=25.The __call__ method allows an instance of a class to be called like a function.\n","\n"],"metadata":{"id":"hwKa42Rpz1Ir"}},{"cell_type":"code","source":["class Greet:\n","    def __call__(self, name):\n","        print(f\"Hello, {name}!\")\n","\n","g = Greet()\n","g(\"Priya\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w2gMaUEwz7IJ","executionInfo":{"status":"ok","timestamp":1751554997435,"user_tz":-330,"elapsed":22,"user":{"displayName":"yadavrao 7156","userId":"13021835502736852476"}},"outputId":"a2a510f1-ba83-49aa-a5d2-7ebc0eb04e7d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, Priya!\n"]}]}]}